//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""085a0a2d-7977-4672-adae-63895804b30c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""605c913e-5954-4f2f-8174-1123fac68a1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GenerateSRW"",
                    ""type"": ""Button"",
                    ""id"": ""d0fe1603-1459-486e-b72f-cccc31d35002"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateRF"",
                    ""type"": ""Button"",
                    ""id"": ""4f1ec4bd-eba8-4475-aa25-ab9ca756a04d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GenerateCF"",
                    ""type"": ""Button"",
                    ""id"": ""d889e56d-1cba-41ea-871b-ea365a814a94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpawnMonster"",
                    ""type"": ""Button"",
                    ""id"": ""73f3877f-f9ae-47da-af0d-44553e178bd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f4f23286-e0fc-4fd3-a57c-2db04e1ceba2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""36b31b96-0b63-4728-97ba-7e7abe7f7b29"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3d9922bc-b273-42de-aa2f-92cb2dd1b6a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""736082a1-6fe4-4644-9297-e15d84764260"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cb9703e9-77a0-472a-8db7-03941d06764e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9f9647f5-4a09-47cc-853a-aa17f46694cb"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateSRW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c473a35-b220-40fc-816c-a24997c85b46"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateRF"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31cf702a-f9fc-49ca-b5a7-0b4adc553dbb"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GenerateCF"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b112d74f-7f96-486d-ae79-578e4c770979"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnMonster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_GenerateSRW = m_Player.FindAction("GenerateSRW", throwIfNotFound: true);
        m_Player_GenerateRF = m_Player.FindAction("GenerateRF", throwIfNotFound: true);
        m_Player_GenerateCF = m_Player.FindAction("GenerateCF", throwIfNotFound: true);
        m_Player_SpawnMonster = m_Player.FindAction("SpawnMonster", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_GenerateSRW;
    private readonly InputAction m_Player_GenerateRF;
    private readonly InputAction m_Player_GenerateCF;
    private readonly InputAction m_Player_SpawnMonster;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @GenerateSRW => m_Wrapper.m_Player_GenerateSRW;
        public InputAction @GenerateRF => m_Wrapper.m_Player_GenerateRF;
        public InputAction @GenerateCF => m_Wrapper.m_Player_GenerateCF;
        public InputAction @SpawnMonster => m_Wrapper.m_Player_SpawnMonster;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @GenerateSRW.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateSRW;
                @GenerateSRW.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateSRW;
                @GenerateSRW.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateSRW;
                @GenerateRF.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateRF;
                @GenerateRF.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateRF;
                @GenerateRF.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateRF;
                @GenerateCF.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateCF;
                @GenerateCF.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateCF;
                @GenerateCF.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGenerateCF;
                @SpawnMonster.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSpawnMonster;
                @SpawnMonster.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSpawnMonster;
                @SpawnMonster.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSpawnMonster;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @GenerateSRW.started += instance.OnGenerateSRW;
                @GenerateSRW.performed += instance.OnGenerateSRW;
                @GenerateSRW.canceled += instance.OnGenerateSRW;
                @GenerateRF.started += instance.OnGenerateRF;
                @GenerateRF.performed += instance.OnGenerateRF;
                @GenerateRF.canceled += instance.OnGenerateRF;
                @GenerateCF.started += instance.OnGenerateCF;
                @GenerateCF.performed += instance.OnGenerateCF;
                @GenerateCF.canceled += instance.OnGenerateCF;
                @SpawnMonster.started += instance.OnSpawnMonster;
                @SpawnMonster.performed += instance.OnSpawnMonster;
                @SpawnMonster.canceled += instance.OnSpawnMonster;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnGenerateSRW(InputAction.CallbackContext context);
        void OnGenerateRF(InputAction.CallbackContext context);
        void OnGenerateCF(InputAction.CallbackContext context);
        void OnSpawnMonster(InputAction.CallbackContext context);
    }
}
